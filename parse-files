#!/usr/bin/env php
<?php declare(strict_types=1);

use PrinsFrank\PdfParser\PdfParser;
use Symfony\Component\Yaml\Yaml;

require __DIR__ . '/vendor/autoload.php';

foreach (array_diff(scandir($filesDir = __DIR__ . '/files'), ['..', '.']) as $creator) {
    $creatorFolder = $filesDir . DIRECTORY_SEPARATOR . $creator;
    foreach (array_diff(scandir($creatorFolder), ['..', '.']) as $sample) {
        $sampleFolder = $creatorFolder . DIRECTORY_SEPARATOR . $sample;
        if (!file_exists($pdfPath = $sampleFolder . DIRECTORY_SEPARATOR . 'file.pdf')) {
            throw new RuntimeException();
        }

        if (file_exists($contentsPath = $sampleFolder . DIRECTORY_SEPARATOR . 'contents.yml')) {
            continue;
        }

        $parsedPDF = (new PdfParser())->parseFile($pdfPath);
        $pages = [];
        foreach ($parsedPDF->getPages() as $pageIndex => $page) {
            $pages[$pageIndex] = [
                'content' => $page->getText(),
            ];

            foreach ($page->getImages() as $imageIndex => $image) {
                $imageFolder = $sampleFolder . DIRECTORY_SEPARATOR . 'images';
                if (!is_dir($imageFolder) && !mkdir($imageFolder, 0777, true) && !is_dir($imageFolder)) {
                    throw new RuntimeException(sprintf('Directory "%s" was not created', $imageFolder));
                }

                $fileName = sprintf('page_%d_image_%d.%s', $pageIndex, $imageIndex, $image->getImageType()->getFileExtension());
                file_put_contents(sprintf('%s/%s', $imageFolder, $fileName), $image->getContent()->toString());
                $pages[$pageIndex]['images'][] = $fileName;
            }
        }

        $yamlContent = Yaml::dump(
            [
                'version' => $parsedPDF->version->value,
                'password' => null,
                'title' => $parsedPDF->getInformationDictionary()?->getTitle(),
                'producer' => $parsedPDF->getInformationDictionary()?->getProducer(),
                'author' => $parsedPDF->getInformationDictionary()?->getAuthor(),
                'creator' => $parsedPDF->getInformationDictionary()?->getCreator(),
                'creationDate' => $parsedPDF->getInformationDictionary()?->getCreationDate(),
                'modificationDate' => $parsedPDF->getInformationDictionary()?->getModificationDate(),
                'pages' => $pages,
            ],
            flags: Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK
        );

        file_put_contents(
            $contentsPath,
            '# yaml-language-server: $schema=./.yml-schema.json' . PHP_EOL . $yamlContent
        );
    }
}
